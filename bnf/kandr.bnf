TRANSLATION_UNIT           : ( EXTERNAL_DECLARATION | TRANSLATION_UNIT EXTERNAL_DECLARATION )
EXTERNAL_DECLARATION       : ( FUNCTION_DEFINITION | DECLARATION )
FUNCTION_DEFINITION        : ( DECLARATION_SPECIFIERS DECLARATOR DECLARATION_LIST COMPOUND_STATEMENT | DECLARATION_SPECIFIERS DECLARATOR COMPOUND_STATEMENT | DECLARATOR DECLARATION_LIST COMPOUND_STATEMENT | DECLARATOR COMPOUND_STATEMENT )
DECLARATION                : ( DECLARATION_SPECIFIERS semicolon | DECLARATION_SPECIFIERS INIT_DECLARATOR_LIST semicolon )
DECLARATION_LIST           : ( DECLARATION | DECLARATION_LIST DECLARATION )
DECLARATION_SPECIFIERS     : ( STORAGE_CLASS_SPECIFIER | STORAGE_CLASS_SPECIFIER DECLARATION_SPECIFIERS | TYPE_SPECIFIER | TYPE_SPECIFIER DECLARATION_SPECIFIERS | TYPE_QUALIFIER | TYPE_QUALIFIER DECLARATION_SPECIFIERS )
STORAGE_CLASS_SPECIFIER    : ( typedef | extern | static | auto | register )
TYPE_SPECIFIER             : ( void | char | short | int | long | float | double | signed | unsigned | STRUCT_OR_UNION_SPECIFIER | ENUM_SPECIFIER | typedef_name )
TYPE_QUALIFIER             : ( const | volatile )
STRUCT_OR_UNION_SPECIFIER  : ( STRUCT_OR_UNION identifier lbracket STRUCT_DECLARATION_LIST rbracket | STRUCT_OR_UNION lbracket STRUCT_DECLARATION_LIST rbracket | STRUCT_OR_UNION identifier )
STRUCT_OR_UNION            : ( struct | union )
STRUCT_DECLARATION_LIST    : ( STRUCT_DECLARATION | STRUCT_DECLARATION_LIST STRUCT_DECLARATION )
INIT_DECLARATOR_LIST       : ( INIT_DECLARATOR | INIT_DECLARATOR_LIST comma INIT_DECLARATOR )
INIT_DECLARATOR            : ( DECLARATOR | DECLARATOR equal INITIALIZER )
STRUCT_DECLARATION         : SPECIFIER_QUALIFIER_LIST STRUCT_DECLARATOR_LIST semicolon
SPECIFIER_QUALIFIER_LIST   : ( TYPE_SPECIFIER SPECIFIER_QUALIFIER_LIST | TYPE_SPECIFIER | TYPE_QUALIFIER SPECIFIER_QUALIFIER_LIST | TYPE_QUALIFIER )
STRUCT_DECLARATOR_LIST     : ( STRUCT_DECLARATOR | STRUCT_DECLARATOR_LIST comma STRUCT_DECLARATOR )
STRUCT_DECLARATOR          : ( DECLARATOR | colon CONSTANT_EXPRESSION | DECLARATOR colon CONSTANT_EXPRESSION )
ENUM_SPECIFIER             : ( enum lbracket ENUMERATOR_LIST rbracket | enum identifier lbracket ENUMERATOR_LIST rbracket | enum identifier )
ENUMERATOR_LIST            : ( ENUMERATOR | ENUMERATOR_LIST comma ENUMERATOR )
ENUMERATOR                 : ( identifier | identifier equal CONSTANT_EXPRESSION )
DECLARATOR                 : ( POINTER DIRECT_DECLARATOR | DIRECT_DECLARATOR )
DIRECT_DECLARATOR          : ( identifier | lparen DECLARATOR rparen | DIRECT_DECLARATOR lbrace CONSTANT_EXPRESSION rbrace | DIRECT_DECLARATOR lbrace rbrace | DIRECT_DECLARATOR lparen PARAMETER_TYPE_LIST rparen | DIRECT_DECLARATOR lparen IDENTIFIER_LIST rparen | DIRECT_DECLARATOR lparen rparen )
POINTER                    : ( star | star TYPE_QUALIFIER_LIST | star POINTER | star TYPE_QUALIFIER_LIST POINTER )
TYPE_QUALIFIER_LIST        : ( TYPE_QUALIFIER | TYPE_QUALIFIER_LIST TYPE_QUALIFIER )
PARAMETER_TYPE_LIST        : ( PARAMETER_LIST | PARAMETER_LIST comma dot_dot_dot )
PARAMETER_LIST             : ( PARAMETER_DECLARATION | PARAMETER_LIST comma PARAMETER_DECLARATION )
PARAMETER_DECLARATION      : ( DECLARATION_SPECIFIERS DECLARATOR | DECLARATION_SPECIFIERS ABSTRACT_DECLARATOR | DECLARATION_SPECIFIERS )
IDENTIFIER_LIST            : ( identifier | IDENTIFIER_LIST comma identifier )
INITIALIZER                : ( ASSIGNMENT_EXPRESSION | lbracket INITIALIZER_LIST rbracket | lbracket INITIALIZER_LIST comma rbracket )
INITIALIZER_LIST           : ( INITIALIZER | INITIALIZER_LIST comma INITIALIZER )
TYPE_NAME                  : ( SPECIFIER_QUALIFIER_LIST | SPECIFIER_QUALIFIER_LIST ABSTRACT_DECLARATOR )
ABSTRACT_DECLARATOR        : ( POINTER | DIRECT_ABSTRACT_DECLARATOR | POINTER DIRECT_ABSTRACT_DECLARATOR )
DIRECT_ABSTRACT_DECLARATOR : ( lparen ABSTRACT_DECLARATOR rparen | lbrace rbrace | lbrace CONSTANT_EXPRESSION rbrace | DIRECT_ABSTRACT_DECLARATOR lbrace rbrace | DIRECT_ABSTRACT_DECLARATOR lbrace CONSTANT_EXPRESSION rbrace | lparen rparen | lparen PARAMETER_TYPE_LIST rparen | DIRECT_ABSTRACT_DECLARATOR lparen rparen | DIRECT_ABSTRACT_DECLARATOR lparen PARAMETER_TYPE_LIST rparen )
STATEMENT                  : ( LABELED_STATEMENT | COMPOUND_STATEMENT | EXPRESSION_STATEMENT | SELECTION_STATEMENT | ITERATION_STATEMENT | JUMP_STATEMENT )
LABELED_STATEMENT          : ( identifier colon STATEMENT | case CONSTANT_EXPRESSION colon STATEMENT | default colon STATEMENT )
EXPRESSION_STATEMENT       : ( semicolon | EXPRESSION semicolon )
COMPOUND_STATEMENT         : ( lbracket rbracket | lbracket STATEMENT_LIST rbracket | lbracket DECLARATION_LIST rbracket | lbracket DECLARATION_LIST STATEMENT_LIST rbracket )
STATEMENT_LIST             : ( STATEMENT | STATEMENT_LIST STATEMENT )
SELECTION_STATEMENT        : ( if lparen EXPRESSION rparen STATEMENT | if lparen EXPRESSION rparen STATEMENT else STATEMENT | switch lparen EXPRESSION rparen STATEMENT )
ITERATION_STATEMENT        : ( while lparen EXPRESSION rparen STATEMENT | do STATEMENT while lparen EXPRESSION rparen semicolon | for lparen EXPRESSION_STATEMENT EXPRESSION_STATEMENT rparen STATEMENT | for lparen EXPRESSION_STATEMENT EXPRESSION_STATEMENT EXPRESSION rparen STATEMENT )
JUMP_STATEMENT             : ( goto identifier semicolon | continue semicolon | break semicolon | return semicolon | return EXPRESSION semicolon )
EXPRESSION                 : ( ASSIGNMENT_EXPRESSION | EXPRESSION comma ASSIGNMENT_EXPRESSION )
ASSIGNMENT_EXPRESSION      : ( CONDITIONAL_EXPRESSION | UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION )
ASSIGNMENT_OPERATOR        : ( equal | star_equal | slash_equal | percent_equal | plus_equal | minus_equal | langle_langle_equal | rangle_rangle_equal | ampasand_equal | hat_equal | pipe_equal )
CONDITIONAL_EXPRESSION     : ( LOGICAL_OR_EXPRESSION | LOGICAL_OR_EXPRESSION question EXPRESSION colon CONDITIONAL_EXPRESSION )
CONSTANT_EXPRESSION        : CONDITIONAL_EXPRESSION
LOGICAL_OR_EXPRESSION      : ( LOGICAL_AND_EXPRESSION | LOGICAL_OR_EXPRESSION pipe_pipe LOGICAL_AND_EXPRESSION )
LOGICAL_AND_EXPRESSION     : ( INCLUSIVE_OR_EXPRESSION | LOGICAL_AND_EXPRESSION ampasand_ampasand INCLUSIVE_OR_EXPRESSION )
INCLUSIVE_OR_EXPRESSION    : ( EXCLUSIVE_OR_EXPRESSION | INCLUSIVE_OR_EXPRESSION pipe EXCLUSIVE_OR_EXPRESSION )
EXCLUSIVE_OR_EXPRESSION    : ( AND_EXPRESSION | EXCLUSIVE_OR_EXPRESSION hat AND_EXPRESSION )
AND_EXPRESSION             : ( EQUALITY_EXPRESSION | AND_EXPRESSION ampasand EQUALITY_EXPRESSION )
EQUALITY_EXPRESSION        : ( RELATIONAL_EXPRESSION | EQUALITY_EXPRESSION equal_equal RELATIONAL_EXPRESSION | EQUALITY_EXPRESSION exclamation_equal RELATIONAL_EXPRESSION )
RELATIONAL_EXPRESSION      : ( SHIFT_EXPRESSION | RELATIONAL_EXPRESSION langle SHIFT_EXPRESSION | RELATIONAL_EXPRESSION rangle SHIFT_EXPRESSION | RELATIONAL_EXPRESSION langle_equal SHIFT_EXPRESSION | RELATIONAL_EXPRESSION rangle_equal SHIFT_EXPRESSION )
SHIFT_EXPRESSION           : ( ADDITIVE_EXPRESSION | SHIFT_EXPRESSION langle_langle ADDITIVE_EXPRESSION | SHIFT_EXPRESSION rangle_rangle ADDITIVE_EXPRESSION )
ADDITIVE_EXPRESSION        : ( MULTIPLICATIVE_EXPRESSION | ADDITIVE_EXPRESSION plus MULTIPLICATIVE_EXPRESSION | ADDITIVE_EXPRESSION minus MULTIPLICATIVE_EXPRESSION )
MULTIPLICATIVE_EXPRESSION  : ( CAST_EXPRESSION | MULTIPLICATIVE_EXPRESSION star CAST_EXPRESSION | MULTIPLICATIVE_EXPRESSION slash CAST_EXPRESSION | MULTIPLICATIVE_EXPRESSION percent CAST_EXPRESSION )
CAST_EXPRESSION            : ( UNARY_EXPRESSION | lparen TYPE_NAME rparen CAST_EXPRESSION )
UNARY_EXPRESSION           : ( POSTFIX_EXPRESSION | plus_plus UNARY_EXPRESSION | minus_minus UNARY_EXPRESSION | UNARY_OPERATOR CAST_EXPRESSION | sizeof UNARY_EXPRESSION | sizeof lparen TYPE_NAME rparen )
UNARY_OPERATOR             : ( ampasand | star | plus | minus | tilda | exclamation )
POSTFIX_EXPRESSION         : ( PRIMARY_EXPRESSION | POSTFIX_EXPRESSION lbrace EXPRESSION rbrace | POSTFIX_EXPRESSION lparen rparen | POSTFIX_EXPRESSION lparen ARGUMENT_EXPRESSION_LIST rparen | POSTFIX_EXPRESSION dot identifier | POSTFIX_EXPRESSION minus_rangle identifier | POSTFIX_EXPRESSION plus_plus | POSTFIX_EXPRESSION minus_minus )
PRIMARY_EXPRESSION         : ( identifier | CONSTANT | string | lparen EXPRESSION rparen )
ARGUMENT_EXPRESSION_LIST   : ( ASSIGNMENT_EXPRESSION | ARGUMENT_EXPRESSION_LIST comma ASSIGNMENT_EXPRESSION )
CONSTANT                   : ( integer_constant | character_constant | floating_constant | enumeration_constant )
