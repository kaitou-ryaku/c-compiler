typedef_name         : __TO_DO_WORK_0__
character_constant   : '(@|\\)(\l|\u|\d| |!|\@|#|$|%|^|&|\*|-|=|`|_|+|\||~|[|]|{|}|;|'|:|,|\.|/|<|>|?)'
enumeration_constant : __TO_DO_WORK_2__
string               : "(\l|\u|_|\d| |%)*"
skip                 : (\s\s*|//(\l|\u|\d| |!|\@|#|$|%|^|&|\*|-|=|`|_|+|\||~|[|]|{|}|;|'|:|,|\.|/|<|>|?)*\s)
floating_constant    : (0|(1|2|3|4|5|6|7|8|9)\d*)\.\d*
integer_constant     : (0|(1|2|3|4|5|6|7|8|9)\d*)
auto                 : auto
break                : break
case                 : case
char                 : char
const                : const
continue             : continue
default              : default
do                   : do
double               : double
else                 : else
enum                 : enum
extern               : extern
float                : float
for                  : for
goto                 : goto
if                   : if
int                  : int
long                 : long
register             : register
return               : return
short                : short
signed               : signed
sizeof               : sizeof
static               : static
struct               : struct
switch               : switch
typedef              : typedef
union                : union
unsigned             : unsigned
void                 : void
volatile             : volatile
while                : while
identifier           : (\l|\u|_)(\l|\u|_|\d)*
langle_langle_equal  : <<=
rangle_rangle_equal  : >>=
dot_dot_dot          : \.\.\.
ampasand_ampasand    : &&
ampasand_equal       : &=
equal_equal          : ==
exclamation_equal    : !=
hat_equal            : ^=
langle_equal         : <=
langle_langle        : <<
minus_equal          : -=
minus_minus          : --
minus_rangle         : ->
percent_equal        : %=
pipe_equal           : \|=
pipe_pipe            : \|\|
plus_equal           : +=
plus_plus            : ++
rangle_equal         : >=
rangle_rangle        : >>
slash_equal          : /=
star_equal           : \*=
ampasand             : &
colon                : :
comma                : ,
dot                  : \.
equal                : =
exclamation          : !
hat                  : ^
langle               : <
lbrace               : [
lbracket             : {
lparen               : \(
minus                : -
percent              : %
pipe                 : \|
plus                 : +
question             : ?
rangle               : >
rbrace               : ]
rbracket             : }
rparen               : \)
semicolon            : ;
slash                : /
star                 : \*
tilda                : ~
