TRANSLATION_UNIT           : EXTERNAL_DECLARATION EXTERNAL_DECLARATION *
EXTERNAL_DECLARATION       : ( FUNCTION_DEFINITION | DECLARATION )
FUNCTION_DEFINITION        : ( @ | DECLARATION_SPECIFIERS ) DECLARATOR DECLARATION * COMPOUND_STATEMENT
DECLARATION                : DECLARATION_SPECIFIERS ( @ | INIT_DECLARATOR_LIST ) semicolon
DECLARATION_SPECIFIERS     : ( STORAGE_CLASS_SPECIFIER | TYPE_SPECIFIER | TYPE_QUALIFIER ) ( STORAGE_CLASS_SPECIFIER | TYPE_SPECIFIER | TYPE_QUALIFIER ) *
STORAGE_CLASS_SPECIFIER    : ( typedef | extern | static | auto | register )
TYPE_SPECIFIER             : ( void | char | short | int | long | float | double | signed | unsigned | STRUCT_OR_UNION_SPECIFIER | ENUM_SPECIFIER | typedef_name )
TYPE_QUALIFIER             : ( const | volatile )
STRUCT_OR_UNION_SPECIFIER  : STRUCT_OR_UNION ( identifier | lbracket STRUCT_DECLARATION_LIST rbracket | identifier lbracket STRUCT_DECLARATION_LIST rbracket )
STRUCT_OR_UNION            : ( struct | union )
STRUCT_DECLARATION_LIST    : STRUCT_DECLARATION STRUCT_DECLARATION *
INIT_DECLARATOR_LIST       : INIT_DECLARATOR ( comma INIT_DECLARATOR ) *
INIT_DECLARATOR            : DECLARATOR ( @ | equal INITIALIZER )
STRUCT_DECLARATION         : SPECIFIER_QUALIFIER_LIST STRUCT_DECLARATOR_LIST semicolon
SPECIFIER_QUALIFIER_LIST   : ( TYPE_SPECIFIER ( @ | SPECIFIER_QUALIFIER_LIST ) | TYPE_QUALIFIER ( @ | SPECIFIER_QUALIFIER_LIST ) )
STRUCT_DECLARATOR_LIST     : STRUCT_DECLARATOR ( comma STRUCT_DECLARATOR ) *
STRUCT_DECLARATOR          : ( DECLARATOR | colon CONSTANT_EXPRESSION | DECLARATOR colon CONSTANT_EXPRESSION )
ENUM_SPECIFIER             : enum ( identifier | lbracket ENUMERATOR_LIST rbracket | identifier lbracket ENUMERATOR_LIST rbracket )
ENUMERATOR_LIST            : ENUMERATOR ( comma ENUMERATOR ) *
ENUMERATOR                 : identifier ( @ | equal CONSTANT_EXPRESSION )
DECLARATOR                 : ( @ | POINTER ) DIRECT_DECLARATOR
DIRECT_DECLARATOR          : ( identifier | lparen DECLARATOR rparen ) ( lbrace ( @ | integer_constant ) rbrace | lparen ( @ | PARAMETER_TYPE_LIST | IDENTIFIER_LIST ) rparen ) *
POINTER                    : star ( @ | TYPE_QUALIFIER_LIST ) ( @ | POINTER )
TYPE_QUALIFIER_LIST        : TYPE_QUALIFIER TYPE_QUALIFIER *
PARAMETER_TYPE_LIST        : PARAMETER_LIST ( @ | comma dot_dot_dot )
PARAMETER_LIST             : PARAMETER_DECLARATION ( comma PARAMETER_DECLARATION ) *
PARAMETER_DECLARATION      : DECLARATION_SPECIFIERS ( @ | DECLARATOR | ABSTRACT_DECLARATOR )
IDENTIFIER_LIST            : identifier ( comma identifier ) *
INITIALIZER                : ( ASSIGNMENT_EXPRESSION | lbracket INITIALIZER_LIST rbracket | lbracket INITIALIZER_LIST comma rbracket )
INITIALIZER_LIST           : INITIALIZER ( comma INITIALIZER ) *
TYPE_NAME                  : SPECIFIER_QUALIFIER_LIST ( @ | ABSTRACT_DECLARATOR )
ABSTRACT_DECLARATOR        : ( POINTER | DIRECT_ABSTRACT_DECLARATOR | POINTER DIRECT_ABSTRACT_DECLARATOR )
DIRECT_ABSTRACT_DECLARATOR : lparen ABSTRACT_DECLARATOR rparen ( lbrace ( @ | CONSTANT_EXPRESSION ) rbrace | lparen ( @ | PARAMETER_TYPE_LIST ) rparen ) *
STATEMENT                  : ( LABELED_STATEMENT | COMPOUND_STATEMENT | EXPRESSION_STATEMENT | SELECTION_STATEMENT | ITERATION_STATEMENT | JUMP_STATEMENT )
LABELED_STATEMENT          : ( identifier | case CONSTANT_EXPRESSION | default ) colon STATEMENT
EXPRESSION_STATEMENT       : ( @ | EXPRESSION ) semicolon
COMPOUND_STATEMENT         : lbracket ( DECLARATION | STATEMENT ) * rbracket
SELECTION_STATEMENT        : ( if lparen EXPRESSION rparen STATEMENT ( @ | else STATEMENT ) | switch lparen EXPRESSION rparen STATEMENT )
ITERATION_STATEMENT        : ( while lparen EXPRESSION rparen STATEMENT | do STATEMENT while lparen EXPRESSION rparen semicolon | for lparen ( @ | EXPRESSION ) semicolon ( @ | EXPRESSION ) semicolon ( @ | EXPRESSION ) rparen STATEMENT )
JUMP_STATEMENT             : ( goto identifier | continue | break | return | return EXPRESSION ) semicolon
EXPRESSION                 : ASSIGNMENT_EXPRESSION ( comma ASSIGNMENT_EXPRESSION ) *
ASSIGNMENT_EXPRESSION      : ( CONDITIONAL_EXPRESSION | UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION )
ASSIGNMENT_OPERATOR        : ( equal | star_equal | slash_equal | percent_equal | plus_equal | minus_equal | langle_langle_equal | rangle_rangle_equal | ampasand_equal | hat_equal | pipe_equal )
CONDITIONAL_EXPRESSION     : LOGICAL_OR_EXPRESSION ( @ | question EXPRESSION colon CONDITIONAL_EXPRESSION )
CONSTANT_EXPRESSION        : CONDITIONAL_EXPRESSION
LOGICAL_OR_EXPRESSION      : LOGICAL_AND_EXPRESSION ( pipe_pipe LOGICAL_AND_EXPRESSION ) *
LOGICAL_AND_EXPRESSION     : INCLUSIVE_OR_EXPRESSION ( ampasand_ampasand INCLUSIVE_OR_EXPRESSION ) *
INCLUSIVE_OR_EXPRESSION    : EXCLUSIVE_OR_EXPRESSION ( pipe EXCLUSIVE_OR_EXPRESSION ) *
EXCLUSIVE_OR_EXPRESSION    : AND_EXPRESSION ( hat AND_EXPRESSION ) *
AND_EXPRESSION             : EQUALITY_EXPRESSION ( ampasand EQUALITY_EXPRESSION ) *
EQUALITY_EXPRESSION        : RELATIONAL_EXPRESSION ( ( equal_equal | exclamation_equal ) RELATIONAL_EXPRESSION ) *
RELATIONAL_EXPRESSION      : SHIFT_EXPRESSION ( ( langle | rangle | langle_equal | rangle_equal ) SHIFT_EXPRESSION ) *
SHIFT_EXPRESSION           : ADDITIVE_EXPRESSION ( ( langle_langle | rangle_rangle ) ADDITIVE_EXPRESSION ) *
ADDITIVE_EXPRESSION        : MULTIPLICATIVE_EXPRESSION ( ( plus | minus ) MULTIPLICATIVE_EXPRESSION ) *
MULTIPLICATIVE_EXPRESSION  : CAST_EXPRESSION ( ( star | slash | percent ) CAST_EXPRESSION ) *
CAST_EXPRESSION            : ( UNARY_EXPRESSION | lparen TYPE_NAME rparen CAST_EXPRESSION )
UNARY_EXPRESSION           : ( POSTFIX_EXPRESSION | ( plus_plus | minus_minus ) UNARY_EXPRESSION | UNARY_OPERATOR CAST_EXPRESSION | sizeof ( UNARY_EXPRESSION | lparen TYPE_NAME rparen ) )
UNARY_OPERATOR             : ( ampasand | star | plus | minus | tilda | exclamation )
POSTFIX_EXPRESSION         : PRIMARY_EXPRESSION ( plus_plus | minus_minus | lbrace EXPRESSION rbrace | lparen ( @ | ARGUMENT_EXPRESSION_LIST ) rparen | ( dot | minus_rangle ) identifier ) *
PRIMARY_EXPRESSION         : ( identifier | CONSTANT | string | lparen EXPRESSION rparen )
ARGUMENT_EXPRESSION_LIST   : ASSIGNMENT_EXPRESSION ( comma ASSIGNMENT_EXPRESSION ) *
CONSTANT                   : ( integer_constant | character_constant | floating_constant | enumeration_constant )
