TRANSLATION_UNIT           : EXTERNAL_DECLARATION EXTERNAL_DECLARATION *
EXTERNAL_DECLARATION       : ( FUNCTION_DEFINITION | DECLARATION )
FUNCTION_DEFINITION        : DECLARATION_SPECIFIER * DECLARATOR DECLARATION * COMPOUND_STATEMENT
DECLARATION_SPECIFIER      : ( STORAGE_CLASS_SPECIFIER | TYPE_SPECIFIER | TYPE_QUALIFIER )
STORAGE_CLASS_SPECIFIER    : ( auto | register | static | extern | typedef )
TYPE_SPECIFIER             : ( void | char | short | int | long | float | double | signed | unsigned | STRUCT_OR_UNION_SPECIFIER | ENUM_SPECIFIER | typedef_name )
STRUCT_OR_UNION_SPECIFIER  : ( STRUCT_OR_UNION identifier lbracket STRUCT_DECLARATION STRUCT_DECLARATION * rbracket | STRUCT_OR_UNION lbracket STRUCT_DECLARATION STRUCT_DECLARATION * rbracket | STRUCT_OR_UNION identifier )
STRUCT_OR_UNION            : ( struct | union )
STRUCT_DECLARATION         : SPECIFIER_QUALIFIER * STRUCT_DECLARATOR_LIST
SPECIFIER_QUALIFIER        : ( TYPE_SPECIFIER | TYPE_QUALIFIER )
STRUCT_DECLARATOR_LIST     : ( STRUCT_DECLARATOR | STRUCT_DECLARATOR_LIST comma STRUCT_DECLARATOR )
STRUCT_DECLARATOR          : ( DECLARATOR | DECLARATOR colon CONSTANT_EXPRESSION | colon CONSTANT_EXPRESSION )
DECLARATOR                 : ( @ | POINTER ) DIRECT_DECLARATOR
POINTER                    : star TYPE_QUALIFIER * ( @ | POINTER )
TYPE_QUALIFIER             : ( const | volatile )
DIRECT_DECLARATOR          : ( identifier | lparen DECLARATOR rparen ) ( lbrace ( @ | CONSTANT_EXPRESSION ) rbrace | lparen PARAMETER_TYPE_LIST rparen | lparen identifier * rparen ) *
CONSTANT_EXPRESSION        : CONDITIONAL_EXPRESSION
CONDITIONAL_EXPRESSION     : ( LOGICAL_OR_EXPRESSION | LOGICAL_OR_EXPRESSION question EXPRESSION colon CONDITIONAL_EXPRESSION )
LOGICAL_OR_EXPRESSION      : LOGICAL_AND_EXPRESSION ( pipe_pipe LOGICAL_AND_EXPRESSION ) *
LOGICAL_AND_EXPRESSION     : INCLUSIVE_OR_EXPRESSION ( ampasand_ampasand INCLUSIVE_OR_EXPRESSION ) *
INCLUSIVE_OR_EXPRESSION    : EXCLUSIVE_OR_EXPRESSION ( pipe EXCLUSIVE_OR_EXPRESSION ) *
EXCLUSIVE_OR_EXPRESSION    : AND_EXPRESSION ( hat AND_EXPRESSION ) *
AND_EXPRESSION             : EQUALITY_EXPRESSION ( ampasand_ampasand EQUALITY_EXPRESSION ) *
EQUALITY_EXPRESSION        : RELATIONAL_EXPRESSION ( equal_equal RELATIONAL_EXPRESSION | exclamation_equal RELATIONAL_EXPRESSION ) *
RELATIONAL_EXPRESSION      : SHIFT_EXPRESSION ( langle SHIFT_EXPRESSION | rangle SHIFT_EXPRESSION | langle_equal SHIFT_EXPRESSION | rangle_equal SHIFT_EXPRESSION ) *
SHIFT_EXPRESSION           : ADDITIVE_EXPRESSION ( langle_langle ADDITIVE_EXPRESSION | rangle_rangle ADDITIVE_EXPRESSION ) *
ADDITIVE_EXPRESSION        : MULTIPLICATIVE_EXPRESSION ( plus MULTIPLICATIVE_EXPRESSION | minus MULTIPLICATIVE_EXPRESSION ) *
MULTIPLICATIVE_EXPRESSION  : CAST_EXPRESSION ( star CAST_EXPRESSION | slash CAST_EXPRESSION | percent CAST_EXPRESSION ) *
CAST_EXPRESSION            : ( UNARY_EXPRESSION | lparen TYPE_NAME rparen CAST_EXPRESSION )
UNARY_EXPRESSION           : ( POSTFIX_EXPRESSION | plus_plus UNARY_EXPRESSION | minus_minus UNARY_EXPRESSION | UNARY_OPERATOR CAST_EXPRESSION | sizeof UNARY_EXPRESSION | sizeof TYPE_NAME )
POSTFIX_EXPRESSION         : PRIMARY_EXPRESSION ( lbrace EXPRESSION rbrace | lparen ARGUMENT_EXPRESSION_LIST rparen | dot identifier | minus_rangle identifier | plus_plus | minus_minus ) *
ARGUMENT_EXPRESSION_LIST   : ASSIGNMENT_EXPRESSION ( comma ASSIGNMENT_EXPRESSION )*
PRIMARY_EXPRESSION         : ( identifier | CONSTANT | string | lparen EXPRESSION rparen )
CONSTANT                   : ( integer_constant | character_constant | floating_constant | enumeration_constant )
EXPRESSION                 : ASSIGNMENT_EXPRESSION ( comma ASSIGNMENT_EXPRESSION ) *
ASSIGNMENT_EXPRESSION      : ( CONDITIONAL_EXPRESSION | UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION )
ASSIGNMENT_OPERATOR        : ( equal | star_equal | slash_equal | percent_equal | plus_equal | minus_equal | langle_langle_equal | rangle_rangle_equal | ampasand_equal | hat_equal | pipe_equal )
UNARY_OPERATOR             : ( ampasand | star | plus | minus | tilda | exclamation )
TYPE_NAME                  : SPECIFIER_QUALIFIER SPECIFIER_QUALIFIER * ( @ | ABSTRACT_DECLARATOR )
PARAMETER_TYPE_LIST        : ( PARAMETER_LIST | PARAMETER_LIST comma dot_dot_dot )
PARAMETER_LIST             : PARAMETER_DECLARATION ( comma PARAMETER_DECLARATION ) *
PARAMETER_DECLARATION      : ( DECLARATION_SPECIFIER DECLARATION_SPECIFIER * DECLARATOR | DECLARATION_SPECIFIER DECLARATION_SPECIFIER * ABSTRACT_DECLARATOR | DECLARATION_SPECIFIER DECLARATION_SPECIFIER * )
ABSTRACT_DECLARATOR        : ( POINTER | POINTER DIRECT_ABSTRACT_DECLARATOR | DIRECT_ABSTRACT_DECLARATOR )
DIRECT_ABSTRACT_DECLARATOR : ( lparen ABSTRACT_DECLARATOR rparen | lbrace ( @ | CONSTANT_EXPRESSION ) rbrace | lparen ( @ | PARAMETER_TYPE_LIST ) rparen ) ( lbrace ( @ | CONSTANT_EXPRESSION ) rbrace | lparen ( @ | PARAMETER_TYPE_LIST ) rparen )*
ENUM_SPECIFIER             : ( enum identifier lbracket ENUMERATOR_LIST rbracket | enum lbracket ENUMERATOR_LIST rbracket | enum identifier )
ENUMERATOR_LIST            : ENUMERATOR ( comma ENUMERATOR ) *
ENUMERATOR                 : ( identifier | identifier equal CONSTANT_EXPRESSION )
DECLARATION                :  DECLARATION_SPECIFIER DECLARATION_SPECIFIER * INIT_DECLARATOR * semicolon
INIT_DECLARATOR            : ( DECLARATOR | DECLARATOR equal INITIALIZER )
INITIALIZER                : ( ASSIGNMENT_EXPRESSION | lbracket INITIALIZER_LIST rbracket | lbracket INITIALIZER_LIST comma rbracket )
INITIALIZER_LIST           : INITIALIZER ( comma INITIALIZER ) *
COMPOUND_STATEMENT         : lbracket DECLARATION * STATEMENT * rbracket
STATEMENT                  : ( LABELED_STATEMENT | EXPRESSION_STATEMENT | COMPOUND_STATEMENT | SELECTION_STATEMENT | ITERATION_STATEMENT | JUMP_STATEMENT )
LABELED_STATEMENT          : ( identifier colon STATEMENT | case CONSTANT_EXPRESSION colon STATEMENT | default colon STATEMENT )
EXPRESSION_STATEMENT       : ( @ | EXPRESSION ) semicolon
SELECTION_STATEMENT        : ( if lparen EXPRESSION rparen STATEMENT | if lparen EXPRESSION rparen STATEMENT else STATEMENT | switch lparen EXPRESSION rparen STATEMENT )
ITERATION_STATEMENT        : ( while lparen EXPRESSION rparen STATEMENT | do STATEMENT while lparen EXPRESSION rparen semicolon | for lparen ( @ | EXPRESSION ) semicolon ( @ | EXPRESSION ) semicolon ( @ | EXPRESSION ) rparen STATEMENT )
JUMP_STATEMENT             : ( goto identifier semicolon | continue semicolon | break semicolon | return ( @ | EXPRESSION ) semicolon )
